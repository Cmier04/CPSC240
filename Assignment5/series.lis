     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Assignment 5, Execution Speed". This program calculated the execution time of a taylor series.              *
     3                                  ;Copyright (C) 2024  Christine Mier                                                                                         *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ;****************************************************************************************************************************
    10                                  
    11                                  
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    14                                  ;Author information
    15                                  ;  Author name: Christine Mier
    16                                  ;  Author email: cmier@csu.fullerton.edu
    17                                  ;
    18                                  ;Program information
    19                                  ; Program name: Assignment 5, Execution Speed
    20                                  ;  Programming languages X86 with one module in C
    21                                  ;  Date development of version 1 began 2024-Nov-13
    22                                  ;  Date development of version 1 completed 2024-Nov-26
    23                                  ;
    24                                  ;Purpose
    25                                  ;   This file handles the input and output of the "Execution Speed" program
    26                                  ;Project information
    27                                  ;  Files: main.c, series.asm, taylor.asm, r.sh
    28                                  ;  Status: The program has been tested extensively with no detectable errors.
    29                                  ;
    30                                  ;Translator information
    31                                  ;  Linux: nasm -f elf64 -l series.lis -o series.o series.asm
    32                                  ;
    33                                  ;References and credits
    34                                  ;
    35                                  ;Format information
    36                                  ;  Page width: 172 columns
    37                                  ;  Begin comments: 61
    38                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    39                                  ;
    40                                  ;===== Begin code area ====================================================================================================================================================
    41                                  
    42                                  extern printf
    43                                  extern fgets
    44                                  extern stdin
    45                                  extern atof
    46                                  extern taylor 
    47                                  global series
    48                                  
    49                                  segment .data
    50 00000000 5468697320736F6674-         intro_msg db "This software will compute any power of e that you may need.",10, 0 
    50 00000009 776172652077696C6C-
    50 00000012 20636F6D7075746520-
    50 0000001B 616E7920706F776572-
    50 00000024 206F66206520746861-
    50 0000002D 7420796F75206D6179-
    50 00000036 206E6565642E0A00   
    51                                      
    52 0000003E 456E74657220666C6F-         enterfloatx db "Enter float value for x: ", 0
    52 00000047 61742076616C756520-
    52 00000050 666F7220783A2000   
    53 00000058 456E74657220746865-         enterterms db "Enter the number of terms in the Taylor sum: ", 0
    53 00000061 206E756D626572206F-
    53 0000006A 66207465726D732069-
    53 00000073 6E2074686520546179-
    53 0000007C 6C6F722073756D3A20-
    53 00000085 00                 
    54 00000086 5468652074696D6520-         start_time db "The time on the clock is now %lu tics and taylor has been called.", 10, 0
    54 0000008F 6F6E2074686520636C-
    54 00000098 6F636B206973206E6F-
    54 000000A1 7720256C7520746963-
    54 000000AA 7320616E6420746179-
    54 000000B3 6C6F72206861732062-
    54 000000BC 65656E2063616C6C65-
    54 000000C5 642E0A00           
    55 000000C9 5468652074696D6520-         end_time db "The time on the clock when Taylor terminated was %lu tics.", 10, 0
    55 000000D2 6F6E2074686520636C-
    55 000000DB 6F636B207768656E20-
    55 000000E4 5461796C6F72207465-
    55 000000ED 726D696E6174656420-
    55 000000F6 77617320256C752074-
    55 000000FF 6963732E0A00       
    56 00000105 546865206578656375-         execution_time db "The execution time was %lu tics.", 10, 0
    56 0000010E 74696F6E2074696D65-
    56 00000117 2077617320256C7520-
    56 00000120 746963732E0A00     
    57 00000127 5468616E6B20796F75-         thanks db "Thank you for waiting.", 10, 0
    57 00000130 20666F722077616974-
    57 00000139 696E672E0A00       
    58                                  
    59 0000013F 54686520636F6D7075-         taylor_results db "The computed approximation of e^x is %lf with precision of 8 digits to the right of the point.", 10, 0
    59 00000148 74656420617070726F-
    59 00000151 78696D6174696F6E20-
    59 0000015A 6F6620655E78206973-
    59 00000163 20256C662077697468-
    59 0000016C 20707265636973696F-
    59 00000175 6E206F662038206469-
    59 0000017E 6769747320746F2074-
    59 00000187 686520726967687420-
    59 00000190 6F662074686520706F-
    59 00000199 696E742E0A00       
    60                                  
    61 0000019F 5468616E6B20796F75-         thank_you db "Thank you for using the Mier exponential calculator.", 10, 0
    61 000001A8 20666F72207573696E-
    61 000001B1 6720746865204D6965-
    61 000001BA 72206578706F6E656E-
    61 000001C3 7469616C2063616C63-
    61 000001CC 756C61746F722E0A00 
    62 000001D5 506C65617365207265-         return db "Please return another day. The computed value will be sent to the caller function.", 10, 0
    62 000001DE 7475726E20616E6F74-
    62 000001E7 686572206461792E20-
    62 000001F0 54686520636F6D7075-
    62 000001F9 7465642076616C7565-
    62 00000202 2077696C6C20626520-
    62 0000020B 73656E7420746F2074-
    62 00000214 68652063616C6C6572-
    62 0000021D 2066756E6374696F6E-
    62 00000226 2E0A00             
    63                                      
    64 00000229 257300                      stringformat db "%s", 0
    65                                  
    66                                  segment .bss
    67                                      ;store the power of e here, this should interact with the taylor file
    68 00000000 <res 400h>                  x resb 1024
    69 00000400 <res 400h>                  terms resb 1024
    70                                  segment .text
    71                                  series:
    72                                  ;push GPRs
    73 00000000 55                      push rbp
    74 00000001 4889E5                  mov rbp, rsp
    75 00000004 53                      push rbx
    76 00000005 51                      push rcx
    77 00000006 52                      push rdx
    78 00000007 57                      push rdi
    79 00000008 56                      push rsi
    80 00000009 4150                    push r8
    81 0000000B 4151                    push r9
    82 0000000D 4152                    push r10
    83 0000000F 4153                    push r11
    84 00000011 4154                    push r12
    85 00000013 4155                    push r13
    86 00000015 4156                    push r14
    87 00000017 4157                    push r15
    88 00000019 9C                      pushf
    89                                  ;*****************************************************Introduction of Program*****************************************************
    90                                      ;output intro_msg
    91 0000001A B800000000                  mov     rax, 0
    92 0000001F 48BF-                       mov     rdi, stringformat
    92 00000021 [2902000000000000] 
    93 00000029 48BE-                       mov     rsi, intro_msg
    93 0000002B [0000000000000000] 
    94 00000033 E8(00000000)                call    printf
    95                                  
    96                                  ;*****************************************************Input Numbers of Program*****************************************************
    97                                      ;NUMBER INPUT, STORING, AND HANDLING
    98                                      ;output enterfloatx
    99 00000038 B800000000                  mov     rax, 0
   100 0000003D 48BF-                       mov     rdi, stringformat
   100 0000003F [2902000000000000] 
   101 00000047 48BE-                       mov     rsi, enterfloatx
   101 00000049 [3E00000000000000] 
   102 00000051 E8(00000000)                call    printf
   103                                  
   104                                      ;input float x as string and convert to float
   105 00000056 B800000000                  mov     rax, 0
   106 0000005B 48BF-                       mov     rdi, x
   106 0000005D [0000000000000000] 
   107 00000065 BE00040000                  mov     rsi, 1024
   108 0000006A 488B1425[00000000]          mov     rdx, [stdin]
   109 00000072 E8(00000000)                call    fgets
   110                                      
   111 00000077 48BF-                       mov     rdi, x
   111 00000079 [0000000000000000] 
   112 00000081 E8(00000000)                call    atof
   113 00000086 F2440F10E0                  movsd   xmm12, xmm0                         ;x stored in xmm12
   114                                  
   115                                      ;output enterterms
   116 0000008B B800000000                  mov     rax, 0
   117 00000090 48BF-                       mov     rdi, stringformat
   117 00000092 [2902000000000000] 
   118 0000009A 48BE-                       mov     rsi, enterterms
   118 0000009C [5800000000000000] 
   119 000000A4 E8(00000000)                call    printf
   120                                  
   121                                      ;input terms as string and convert to float
   122 000000A9 B800000000                  mov     rax, 0
   123 000000AE 48BF-                       mov     rdi, terms
   123 000000B0 [0004000000000000] 
   124 000000B8 BE00040000                  mov     rsi, 1024
   125 000000BD 488B1425[00000000]          mov     rdx, [stdin]
   126 000000C5 E8(00000000)                call    fgets
   127                                  
   128 000000CA 48BF-                       mov     rdi, terms
   128 000000CC [0004000000000000] 
   129 000000D4 E8(00000000)                call    atof
   130 000000D9 F2440F10E8                  movsd   xmm13, xmm0                         ;number of terms stored in xmm13
   131                                  
   132                                  ;*****************************************************Start time and Call Taylor*****************************************************
   133                                      ;get start time
   134 000000DE 0FA2                        cpuid
   135 000000E0 0F31                        rdtsc
   136 000000E2 48C1E220                    shl     rdx, 32
   137 000000E6 4801C2                      add     rdx, rax
   138 000000E9 4989D7                      mov     r15, rdx                    ;store time in r12 register
   139                                  
   140                                      ;output start_time
   141 000000EC B800000000                  mov     rax, 0
   142 000000F1 48BF-                       mov     rdi, start_time
   142 000000F3 [8600000000000000] 
   143 000000FB 4C89FE                      mov     rsi, r15                    ;get time from r12 register
   144 000000FE E8(00000000)                call    printf
   145                                  
   146                                      ;call taylor
   147 00000103 F20F100425-                 movsd   xmm0, [x]
   147 00000108 [00000000]         
   148 0000010C 48BF-                       mov     rdi, terms
   148 0000010E [0004000000000000] 
   149 00000116 E8(00000000)                call    taylor
   150 0000011B F2440F10F8                  movsd   xmm15, xmm0                 ;move result into xmm15 (less volatile register)
   151                                  
   152                                      ;output thanks
   153 00000120 B800000000                  mov     rax, 0
   154 00000125 48BF-                       mov     rdi, stringformat
   154 00000127 [2902000000000000] 
   155 0000012F 48BE-                       mov     rsi, thanks
   155 00000131 [2701000000000000] 
   156 00000139 E8(00000000)                call    printf
   157                                  
   158                                  ;*****************************************************End time and Execution time*****************************************************
   159                                      ;get end time
   160 0000013E 0FA2                        cpuid
   161 00000140 0F31                        rdtsc
   162 00000142 48C1E220                    shl     rdx, 32
   163 00000146 4801C2                      add     rdx, rax
   164 00000149 4989D6                      mov     r14, rdx
   165                                  
   166                                      ;output end time
   167 0000014C B800000000                  mov     rax, 0
   168 00000151 48BF-                       mov     rdi, end_time
   168 00000153 [C900000000000000] 
   169 0000015B 4C89F6                      mov     rsi, r14
   170 0000015E E8(00000000)                call    printf
   171                                  
   172                                      ;get execution time
   173 00000163 4D29FE                      sub     r14, r15
   174                                  
   175                                      ;output execution time
   176 00000166 B800000000                  mov     rax, 0
   177 0000016B 48BF-                       mov     rdi, execution_time
   177 0000016D [0501000000000000] 
   178 00000175 4C89F6                      mov     rsi, r14
   179 00000178 E8(00000000)                call    printf
   180                                  
   181                                  ;*****************************************************Taylor Series Results*****************************************************
   182                                      ;output result of taylor
   183 0000017D B801000000                  mov     rax, 1
   184 00000182 48BF-                       mov     rdi, taylor_results
   184 00000184 [3F01000000000000] 
   185 0000018C F2410F10C7                  movsd   xmm0, xmm15
   186 00000191 E8(00000000)                call    printf
   187                                  
   188                                  ;*****************************************************Outro of Program and return to main.c*****************************************************
   189                                      ;output thanks
   190 00000196 B800000000                  mov     rax, 0
   191 0000019B 48BF-                       mov     rdi, stringformat
   191 0000019D [2902000000000000] 
   192 000001A5 48BE-                       mov     rsi, thank_you
   192 000001A7 [9F01000000000000] 
   193 000001AF E8(00000000)                call    printf
   194                                  
   195                                      ;output return
   196 000001B4 B800000000                  mov     rax, 0
   197 000001B9 48BF-                       mov     rdi, stringformat
   197 000001BB [2902000000000000] 
   198 000001C3 48BE-                       mov     rsi, return
   198 000001C5 [D501000000000000] 
   199 000001CD E8(00000000)                call    printf
   200                                  
   201                                  ;restore GPRs
   202 000001D2 9D                      popf
   203 000001D3 415F                    pop r15
   204 000001D5 415E                    pop r14
   205 000001D7 415D                    pop r13
   206 000001D9 415C                    pop r12
   207 000001DB 415B                    pop r11
   208 000001DD 415A                    pop r10
   209 000001DF 4159                    pop r9
   210 000001E1 4158                    pop r8
   211 000001E3 5E                      pop rsi
   212 000001E4 5F                      pop rdi
   213 000001E5 5A                      pop rdx
   214 000001E6 59                      pop rcx
   215 000001E7 5B                      pop rbx
   216 000001E8 5D                      pop rbp
   217                                  
   218 000001E9 C3                      ret
