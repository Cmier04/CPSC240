     1                                  ;Author: Christine Mier
     2                                  ;Email: cmier@csu.fullerton.edu
     3                                  ;Course/Section: CPSC240-17 Final Program
     4                                  ;Date: Dec-17-2024
     5                                  
     6                                  extern printf
     7                                  extern fgets
     8                                  extern scanf
     9                                  extern stdin
    10                                  extern atol
    11                                  extern manager
    12                                  global input_array
    13                                  
    14                                  ;isdigit only tests one character and isint tests the whole inputted value
    15                                  segment .data
    16 00000000 257300                      stringformat db "%s", 0
    17 00000003 256C6400                    intformat db "%ld", 0
    18                                  segment .bss
    19                                      ;remains empty
    20                                  segment .text
    21                                  input_array:
    22                                  ;16 pushes
    23 00000000 55                          push rbp
    24 00000001 4889E5                      mov rbp, rsp
    25 00000004 53                          push rbx
    26 00000005 51                          push rcx
    27 00000006 52                          push rdx
    28 00000007 57                          push rdi
    29 00000008 56                          push rsi
    30 00000009 4150                        push r8
    31 0000000B 4151                        push r9
    32 0000000D 4152                        push r10
    33 0000000F 4153                        push r11
    34 00000011 4154                        push r12
    35 00000013 4155                        push r13
    36 00000015 4156                        push r14
    37 00000017 4157                        push r15
    38 00000019 9C                          pushf
    39                                  
    40                                  ;backup incoming parameters:
    41 0000001A 4989FE                      mov     r14, rdi        ;r14 is the array that was declared in caller function
    42 0000001D 4989F7                      mov     r15, rsi        ;r15 is max number of elements that can be stored in array
    43                                      ;rdi and rsi are free to use but r14 and r15 are fixed
    44                                  
    45 00000020 4D31ED                      xor     r13, r13        ;faster execution than mov r13,0;; x13 counts numbers inserted into the array
    46 00000023 4881EC20030000              sub     rsp, 800        ;800 bytes = 100 qwords, eq of pushing rax 300 times
    47                                  
    48                                  beginloop:
    49                                      ;prompt for input
    50                                      ;input a number
    51 0000002A B800000000                  mov     rax, 0
    52 0000002F 4889E7                      mov     rdi, rsp        ;first parameter for fgets and second is for storage
    53 00000032 BE1F030000                  mov     rsi, 799        ;leave 1 byte for null character
    54 00000037 488B1425[00000000]          mov     rdx, [stdin]
    55 0000003F E8(00000000)                call    fgets
    56                                      ;if ctrl+D is detected, end function
    57 00000044 4883F800                    cmp     rax, 0         ;try cmp rax, 0
    58 00000048 741B                        je      loopdone        ;if it doesn't work, try changing to beginloop
    59                                  
    60                                      ;convert string on top of stack to int
    61 0000004A B800000000                  mov     rax, 0
    62 0000004F 4889E7                      mov     rdi, rsp
    63 00000052 E8(00000000)                call    atol            ;in C++ library and places answer in rax
    64 00000057 4B8904EE                    mov     [r14 + 8 * r13], rax
    65                                  
    66 0000005B 49FFC5                      inc     r13             ;inc is like r13++ so it is counted, incremented
    67 0000005E 4D39FD                      cmp     r13, r15        ;checks if count has reached limit (max size of the array), if r13 = r15
    68 00000061 7D02                        jge     loopdone
    69 00000063 EBC5                        jmp     beginloop
    70                                  
    71                                  loopdone:               ;ctrl d sends here and if it's done aswell
    72                                  
    73 00000065 4C89E8                      mov     rax, r13
    74 00000068 4881C420030000              add     rsp, 800
    75                                  
    76 0000006F 4C89E8                      mov     rax, r13
    77                                  
    78                                  ;16 pops     no rax here
    79 00000072 9D                          popf
    80 00000073 415F                        pop r15
    81 00000075 415E                        pop r14
    82 00000077 415D                        pop r13
    83 00000079 415C                        pop r12
    84 0000007B 415B                        pop r11
    85 0000007D 415A                        pop r10
    86 0000007F 4159                        pop r9
    87 00000081 4158                        pop r8
    88 00000083 5E                          pop rsi
    89 00000084 5F                          pop rdi
    90 00000085 5A                          pop rdx
    91 00000086 59                          pop rcx
    92 00000087 5B                          pop rbx
    93 00000088 5D                          pop rbp
    94                                  
    95 00000089 C3                          ret
