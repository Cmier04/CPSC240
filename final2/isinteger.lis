     1                                  global isinteger
     2                                  extern strlen
     3                                  extern printf
     4                                  
     5                                  segment .data
     6                                  
     7                                  segment .bss
     8                                  
     9                                  segment .text
    10                                  isinteger:
    11                                      ;15 pushes
    12 00000000 55                          push    rbp                     ;Backup rbp
    13 00000001 4889E5                      mov     rbp,rsp                 ;The base pointer now points to top of stack
    14 00000004 57                          push    rdi                     ;Backup rdi
    15 00000005 56                          push    rsi                     ;Backup rsi
    16 00000006 52                          push    rdx                     ;Backup rdx
    17 00000007 51                          push    rcx                     ;Backup rcx
    18 00000008 4150                        push    r8                      ;Backup r8
    19 0000000A 4151                        push    r9                      ;Backup r9
    20 0000000C 4152                        push    r10                     ;Backup r10
    21 0000000E 4153                        push    r11                     ;Backup r11
    22 00000010 4154                        push    r12                     ;Backup r12
    23 00000012 4155                        push    r13                     ;Backup r13
    24 00000014 4156                        push    r14                     ;Backup r14
    25 00000016 4157                        push    r15                     ;Backup r15
    26 00000018 53                          push    rbx                     ;Backup rbx
    27 00000019 9C                          pushf                           ;Backup rflags
    28                                  
    29 0000001A 4989FF                      mov     r15, rdi                ; rdi contains the start of the array
    30 0000001D 41BE01000000                mov     r14, 1                  ; r14 is the index starting at 1
    31                                  
    32                                      ; Get the string length
    33 00000023 4C89FF                      mov     rdi, r15
    34 00000026 E8(00000000)                call    strlen
    35 0000002B 4989C5                      mov     r13, rax                
    36 0000002E 49FFCD                      dec     r13                     ; r13 store the string length minus the null termination character
    37                                  
    38                                      ; Check if the first element is '+' or '-' and continute validation if so
    39 00000031 41803F2B                    cmp     byte[r15], '+'
    40 00000035 7414                        je      continue_validation
    41 00000037 41803F2D                    cmp     byte[r15], '-'
    42 0000003B 740E                        je      continue_validation
    43                                  
    44                                      ; Check if the first element is a digit, continue to the loop if it is
    45 0000003D 498B3F                      mov     rdi, [r15]
    46 00000040 E847000000                  call    is_digit
    47 00000045 4883F800                    cmp     rax, 0
    48 00000049 7419                        je      not_an_integer
    49                                  
    50                                  continue_validation:
    51                                      ; If index >= length, stop checking
    52 0000004B 4D39EE                      cmp     r14, r13
    53 0000004E 7D1D                        jge     is_an_integer  
    54                                  
    55                                      ; Check if array[index] is a digit, translate to { is_digit(array[index]) } code in C
    56 00000050 4B8B3C37                    mov     rdi, [r15 + r14 * 1]    ; Calculate the address of a char(byte) array. r15 is the base address, r14 * 1 is the offset. 1 is redundant, but showing it is offset by 1 byte time the index count
    57 00000054 E833000000                  call    is_digit
    58                                  
    59                                      ; If array[index] is not a digit, return false
    60 00000059 4883F800                    cmp     rax, 0                  ; Assembly has no bolean; 0 = false, -1 = true as user defined in is_digit() below
    61 0000005D 7405                        je      not_an_integer
    62                                  
    63                                      ; If array[index] is a digit, continue the loop
    64 0000005F 49FFC6                      inc     r14
    65 00000062 EBE7                        jmp     continue_validation
    66                                  
    67                                  not_an_integer:
    68                                      ; Set the return to false
    69 00000064 48C7C0FFFFFFFF              mov     rax, -1                 ; I define -1 = false
    70 0000006B EB07                        jmp     exit
    71                                  is_an_integer:
    72                                      ; Set the return to true
    73 0000006D B800000000                  mov     rax, 0                  ; I define 0 = true    
    74 00000072 EB00                        jmp     exit                
    75                                  
    76                                  exit:
    77                                      ;15 pop
    78 00000074 9D                          popf                            ;Restore rflags
    79 00000075 5B                          pop     rbx                     ;Restore rbx
    80 00000076 415F                        pop     r15                     ;Restore r15
    81 00000078 415E                        pop     r14                     ;Restore r14
    82 0000007A 415D                        pop     r13                     ;Restore r13
    83 0000007C 415C                        pop     r12                     ;Restore r12
    84 0000007E 415B                        pop     r11                     ;Restore r11
    85 00000080 415A                        pop     r10                     ;Restore r10
    86 00000082 4159                        pop     r9                      ;Restore r9
    87 00000084 4158                        pop     r8                      ;Restore r8
    88 00000086 59                          pop     rcx                     ;Restore rcx
    89 00000087 5A                          pop     rdx                     ;Restore rdx
    90 00000088 5E                          pop     rsi                     ;Restore rsi
    91 00000089 5F                          pop     rdi                     ;Restore rdi
    92 0000008A 5D                          pop     rbp                     ;Restore rbp
    93                                  
    94 0000008B C3                          ret
    95                                  
    96                                  ;========= Begin function is_digit ==================================================================================
    97                                  
    98                                  ;****************************************************************************************************************************
    99                                  ;Program name: "is_digit".  This a library function contained in a single file.  The function receives a char parameter.  It*
   100                                  ;returns true if that parameter is the ascii value of a decimal digit and returns false in all other cases.                  *
   101                                  ;Copyright (C) 2022 Floyd Holliday.                                                                                         *
   102                                  ;                                                                                                                           *
   103                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public   *
   104                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be   *
   105                                  ;useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.*
   106                                  ;See the GNU Lesser General Public License for more details. A copy of the GNU General Public License v3 is available here: *
   107                                  ;<https:;www.gnu.org/licenses/>.                                                                                            *
   108                                  ;****************************************************************************************************************************
   109                                  ;
   110                                  ;
   111                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
   112                                  ;Author information
   113                                  ;  Author name: Floyd Holliday
   114                                  ;  Author email: holliday@fullerton.edu
   115                                  ;  Author phone (wired phone in CS building): (657)278-7021
   116                                  ;
   117                                  ;Status
   118                                  ;  This software is not an application program, but rather it is a single function licensed for use by other applications.
   119                                  ;  This function can be embedded within both FOSS programs and in proprietary programs as permitted by the LGPL.
   120                                  
   121                                  ;Function information
   122                                  ;  Function name: is_digit
   123                                  ;  Name selection.  This function is named is_digit to avoid confusion with an existing library function named isdigit.
   124                                  ;  Programming language: X86 assembly in Intel syntax.
   125                                  ;  Date development began:  2022-Feb-28
   126                                  ;  Date version 1.0 finished: 2022-Feb 28
   127                                  ;  Files of this function: currently is_digit is an auxillary function of isfloat, and as such does not occupy its own file.
   128                                  ;  System requirements: an X86 platform with nasm installed or other compatible assembler.
   129                                  ;  Known issues: none
   130                                  ;  Assembler used for testing: Nasm version 2.14.02
   131                                  ;  Prototype: bool is_digit(char);
   132                                  ;
   133                                  ;Purpose
   134                                  ;  This function wil accept a single char as input parameter and determine if that parameter represents a decimal digit. 
   135                                  ;
   136                                  ;Translation information if this function occupied its own file.  Currently the function is_digit resides in the same 
   137                                  ;same file as isfloat and therefore, will be assembled when isfloat is assembled.
   138                                  ;  Assemble: nasm -f elf64 -l is_digit.lis -o is_digit.o is_digit.asm
   139                                  ;
   140                                  ;Software design document:
   141                                  ;  An Execution flow chart accompanies this function.  That document will provide a better understanding of the 
   142                                  ;  algorithm used in the isfloat function than a direct reading of the source code of the function.
   143                                  
   144                                  ;========= Begin source code ====================================================================================
   145                                  ;Declaration area
   146                                  true equ -1
   147                                  false equ 0
   148                                  ascii_value_of_zero equ 0x30
   149                                  ascii_value_of_nine equ 0x39
   150                                  
   151                                  segment .data
   152                                     ;This segment is empty
   153                                  
   154                                  segment .bss
   155                                     ;This segment is empty
   156                                  
   157                                  segment .text
   158                                  is_digit:
   159                                      ;Block that backs up almost all GPRs
   160                                      ;Back up the general purpose registers for the sole purpose of protecting the data of the caller.
   161 0000008C 55                          push rbp                                          ;Backup rbp
   162 0000008D 4889E5                      mov  rbp,rsp                                      ;The base pointer now points to top of stack
   163 00000090 57                          push rdi                                          ;Backup rdi
   164 00000091 56                          push rsi                                          ;Backup rsi
   165 00000092 52                          push rdx                                          ;Backup rdx
   166 00000093 51                          push rcx                                          ;Backup rcx
   167 00000094 4150                        push r8                                           ;Backup r8
   168 00000096 4151                        push r9                                           ;Backup r9
   169 00000098 4152                        push r10                                          ;Backup r10
   170 0000009A 4153                        push r11                                          ;Backup r11
   171 0000009C 4154                        push r12                                          ;Backup r12
   172 0000009E 4155                        push r13                                          ;Backup r13
   173 000000A0 4156                        push r14                                          ;Backup r14
   174 000000A2 4157                        push r15                                          ;Backup r15
   175 000000A4 53                          push rbx                                          ;Backup rbx
   176 000000A5 9C                          pushf                                             ;Backup rflags
   177                                  
   178                                      ;Make a copy of the passed in array of ascii values.
   179                                      ;Note that only the low one-byte of rdi is important for this function is_digit.
   180                                      ;Nevertheless, we copy the entire 8-byte register.
   181 000000A6 41BD00000000                mov r13,0
   182 000000AC 4188FD                      mov r13b,dil     ;Copy the low byte of rdi to the low byte of r13.  The other bytes of rdi are all zeros.
   183                                  
   184                                      ;Block to test if value in r13 >= ascii(0)
   185 000000AF 4983FD30                    cmp r13,ascii_value_of_zero
   186 000000B3 7C12                        jl is_digit.return_false
   187                                  
   188                                      ;Block to test if value in r13 <= ascii(9)
   189 000000B5 4983FD39                    cmp r13,ascii_value_of_nine
   190 000000B9 7F0C                        jg is_digit.return_false
   191                                  
   192                                      ;Return true
   193 000000BB 4831C0                      xor rax,rax  ;Set rax to zero
   194 000000BE 48C7C0FFFFFFFF              mov rax,true
   195 000000C5 EB08                        jmp is_digit.restore_gpr_registers
   196                                  
   197                                      is_digit.return_false:
   198 000000C7 4831C0                      xor rax,rax  ;Set rax to zero
   199 000000CA B800000000                  mov rax,false
   200                                  
   201                                      is_digit.restore_gpr_registers:
   202                                      ;Restore all general purpose registers to their original values
   203 000000CF 9D                          popf                                    ;Restore rflags
   204 000000D0 5B                          pop rbx                                 ;Restore rbx
   205 000000D1 415F                        pop r15                                 ;Restore r15
   206 000000D3 415E                        pop r14                                 ;Restore r14
   207 000000D5 415D                        pop r13                                 ;Restore r13
   208 000000D7 415C                        pop r12                                 ;Restore r12
   209 000000D9 415B                        pop r11                                 ;Restore r11
   210 000000DB 415A                        pop r10                                 ;Restore r10
   211 000000DD 4159                        pop r9                                  ;Restore r9
   212 000000DF 4158                        pop r8                                  ;Restore r8
   213 000000E1 59                          pop rcx                                 ;Restore rcx
   214 000000E2 5A                          pop rdx                                 ;Restore rdx
   215 000000E3 5E                          pop rsi                                 ;Restore rsi
   216 000000E4 5F                          pop rdi                                 ;Restore rdi
   217 000000E5 5D                          pop rbp                                 ;Restore rbp
   218                                  
   219 000000E6 C3                          ret                                     ;Pop the integer stack and jump to the address represented by the popped value.
