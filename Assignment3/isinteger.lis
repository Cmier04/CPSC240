     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Assignment3, The Arrays Program". This program demonstrates the use of user input into an array and         *
     3                                  ;getting the sum of an array as well as sorting it using Assembly, C, and C++.                                              *
     4                                  ;Copyright (C) 2024  Christine Mier                                                                                         *
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     8                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  
    14                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    15                                  ;Author information
    16                                  ;  Author name: Khoa Nguyen
    17                                  ;  Author email:
    18                                  ;
    19                                  ;Program information
    20                                  ; Program name: Assignment 3, The Array Program
    21                                  ;  Programming languages X86 with one module in C++ and one module in C
    22                                  ;  Date development of version 1 began 2024-Oct-09
    23                                  ;  Date development of version 1 completed 2024-Oct-10
    24                                  ;
    25                                  ;Purpose
    26                                  ;  This program is a 'Array' program which demonstrates the use of user input into an array and getting the sum of an array as well as sorting it using Assembly, C, and C++.
    27                                  ;
    28                                  ;Project information
    29                                  ;  Files: main.c, manager.asm, input_array.asm, isinteger.asm, output_array.asm, sum.asm, sort.cpp, run.sh
    30                                  ;  Status: The program has been tested extensively with no detectable errors. However, it does not print output of array correctly and does not call for sum of array correctly
    31                                  ;
    32                                  ;Translator information
    33                                  ;  Linux: nasm -f elf64 -l isinteger.lis -o isinteger.o isinteger.asm
    34                                  
    35                                  ;References and credits
    36                                  ;
    37                                  
    38                                  ;Format information
    39                                  ;  Page width: 172 columns
    40                                  ;  Begin comments: 61
    41                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    42                                  ;
    43                                  ;===== Begin code area ====================================================================================================================================================
    44                                  
    45                                  global isinteger
    46                                  extern strlen
    47                                  extern printf
    48                                  
    49                                  segment .data
    50                                  
    51                                  segment .bss
    52                                  
    53                                  segment .text
    54                                  isinteger:
    55                                      ;15 pushes
    56 00000000 55                          push    rbp                     ;Backup rbp
    57 00000001 4889E5                      mov     rbp,rsp                 ;The base pointer now points to top of stack
    58 00000004 57                          push    rdi                     ;Backup rdi
    59 00000005 56                          push    rsi                     ;Backup rsi
    60 00000006 52                          push    rdx                     ;Backup rdx
    61 00000007 51                          push    rcx                     ;Backup rcx
    62 00000008 4150                        push    r8                      ;Backup r8
    63 0000000A 4151                        push    r9                      ;Backup r9
    64 0000000C 4152                        push    r10                     ;Backup r10
    65 0000000E 4153                        push    r11                     ;Backup r11
    66 00000010 4154                        push    r12                     ;Backup r12
    67 00000012 4155                        push    r13                     ;Backup r13
    68 00000014 4156                        push    r14                     ;Backup r14
    69 00000016 4157                        push    r15                     ;Backup r15
    70 00000018 53                          push    rbx                     ;Backup rbx
    71 00000019 9C                          pushf                           ;Backup rflags
    72                                  
    73 0000001A 4989FF                      mov     r15, rdi                ; rdi contains the start of the array
    74 0000001D 41BE01000000                mov     r14, 1                  ; r14 is the index starting at 1
    75                                  
    76                                      ; Get the string length
    77 00000023 4C89FF                      mov     rdi, r15
    78 00000026 E8(00000000)                call    strlen
    79 0000002B 4989C5                      mov     r13, rax                
    80 0000002E 49FFCD                      dec     r13                     ; r13 store the string length minus the null termination character
    81                                  
    82                                      ; Check if the first element is '+' or '-' and continute validation if so
    83 00000031 41803F2B                    cmp     byte[r15], '+'
    84 00000035 7414                        je      continue_validation
    85 00000037 41803F2D                    cmp     byte[r15], '-'
    86 0000003B 740E                        je      continue_validation
    87                                  
    88                                      ; Check if the first element is a digit, continue to the loop if it is
    89 0000003D 498B3F                      mov     rdi, [r15]
    90 00000040 E847000000                  call    is_digit
    91 00000045 4883F800                    cmp     rax, 0
    92 00000049 7419                        je      not_an_integer
    93                                  
    94                                  continue_validation:
    95                                      ; If index >= length, stop checking
    96 0000004B 4D39EE                      cmp     r14, r13
    97 0000004E 7D1D                        jge     is_an_integer  
    98                                  
    99                                      ; Check if array[index] is a digit, translate to { is_digit(array[index]) } code in C
   100 00000050 4B8B3C37                    mov     rdi, [r15 + r14 * 1]    ; Calculate the address of a char(byte) array. r15 is the base address, r14 * 1 is the offset. 1 is redundant, but showing it is offset by 1 byte time the index count
   101 00000054 E833000000                  call    is_digit
   102                                  
   103                                      ; If array[index] is not a digit, return false
   104 00000059 4883F800                    cmp     rax, 0                  ; Assembly has no bolean; 0 = false, -1 = true as user defined in is_digit() below
   105 0000005D 7405                        je      not_an_integer
   106                                  
   107                                      ; If array[index] is a digit, continue the loop
   108 0000005F 49FFC6                      inc     r14
   109 00000062 EBE7                        jmp     continue_validation
   110                                  
   111                                  not_an_integer:
   112                                      ; Set the return to false
   113 00000064 48C7C0FFFFFFFF              mov     rax, -1                 ; I define -1 = false
   114 0000006B EB07                        jmp     exit
   115                                  is_an_integer:
   116                                      ; Set the return to true
   117 0000006D B800000000                  mov     rax, 0                  ; I define 0 = true    
   118 00000072 EB00                        jmp     exit                
   119                                  
   120                                  exit:
   121                                      ;15 pop
   122 00000074 9D                          popf                            ;Restore rflags
   123 00000075 5B                          pop     rbx                     ;Restore rbx
   124 00000076 415F                        pop     r15                     ;Restore r15
   125 00000078 415E                        pop     r14                     ;Restore r14
   126 0000007A 415D                        pop     r13                     ;Restore r13
   127 0000007C 415C                        pop     r12                     ;Restore r12
   128 0000007E 415B                        pop     r11                     ;Restore r11
   129 00000080 415A                        pop     r10                     ;Restore r10
   130 00000082 4159                        pop     r9                      ;Restore r9
   131 00000084 4158                        pop     r8                      ;Restore r8
   132 00000086 59                          pop     rcx                     ;Restore rcx
   133 00000087 5A                          pop     rdx                     ;Restore rdx
   134 00000088 5E                          pop     rsi                     ;Restore rsi
   135 00000089 5F                          pop     rdi                     ;Restore rdi
   136 0000008A 5D                          pop     rbp                     ;Restore rbp
   137                                  
   138 0000008B C3                          ret
   139                                  
   140                                  ;========= Begin function is_digit ==================================================================================
   141                                  
   142                                  ;****************************************************************************************************************************
   143                                  ;Program name: "is_digit".  This a library function contained in a single file.  The function receives a char parameter.  It*
   144                                  ;returns true if that parameter is the ascii value of a decimal digit and returns false in all other cases.                  *
   145                                  ;Copyright (C) 2022 Floyd Holliday.                                                                                         *
   146                                  ;                                                                                                                           *
   147                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public   *
   148                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be   *
   149                                  ;useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.*
   150                                  ;See the GNU Lesser General Public License for more details. A copy of the GNU General Public License v3 is available here: *
   151                                  ;<https:;www.gnu.org/licenses/>.                                                                                            *
   152                                  ;****************************************************************************************************************************
   153                                  ;
   154                                  ;
   155                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
   156                                  ;Author information
   157                                  ;  Author name: Floyd Holliday
   158                                  ;  Author email: holliday@fullerton.edu
   159                                  ;  Author phone (wired phone in CS building): (657)278-7021
   160                                  ;
   161                                  ;Status
   162                                  ;  This software is not an application program, but rather it is a single function licensed for use by other applications.
   163                                  ;  This function can be embedded within both FOSS programs and in proprietary programs as permitted by the LGPL.
   164                                  
   165                                  ;Function information
   166                                  ;  Function name: is_digit
   167                                  ;  Name selection.  This function is named is_digit to avoid confusion with an existing library function named isdigit.
   168                                  ;  Programming language: X86 assembly in Intel syntax.
   169                                  ;  Date development began:  2022-Feb-28
   170                                  ;  Date version 1.0 finished: 2022-Feb 28
   171                                  ;  Files of this function: currently is_digit is an auxillary function of isfloat, and as such does not occupy its own file.
   172                                  ;  System requirements: an X86 platform with nasm installed or other compatible assembler.
   173                                  ;  Known issues: none
   174                                  ;  Assembler used for testing: Nasm version 2.14.02
   175                                  ;  Prototype: bool is_digit(char);
   176                                  ;
   177                                  ;Purpose
   178                                  ;  This function wil accept a single char as input parameter and determine if that parameter represents a decimal digit. 
   179                                  ;
   180                                  ;Translation information if this function occupied its own file.  Currently the function is_digit resides in the same 
   181                                  ;same file as isfloat and therefore, will be assembled when isfloat is assembled.
   182                                  ;  Assemble: nasm -f elf64 -l is_digit.lis -o is_digit.o is_digit.asm
   183                                  ;
   184                                  ;Software design document:
   185                                  ;  An Execution flow chart accompanies this function.  That document will provide a better understanding of the 
   186                                  ;  algorithm used in the isfloat function than a direct reading of the source code of the function.
   187                                  
   188                                  ;========= Begin source code ====================================================================================
   189                                  ;Declaration area
   190                                  true equ -1
   191                                  false equ 0
   192                                  ascii_value_of_zero equ 0x30
   193                                  ascii_value_of_nine equ 0x39
   194                                  
   195                                  segment .data
   196                                     ;This segment is empty
   197                                  
   198                                  segment .bss
   199                                     ;This segment is empty
   200                                  
   201                                  segment .text
   202                                  is_digit:
   203                                      ;Block that backs up almost all GPRs
   204                                      ;Back up the general purpose registers for the sole purpose of protecting the data of the caller.
   205 0000008C 55                          push rbp                                          ;Backup rbp
   206 0000008D 4889E5                      mov  rbp,rsp                                      ;The base pointer now points to top of stack
   207 00000090 57                          push rdi                                          ;Backup rdi
   208 00000091 56                          push rsi                                          ;Backup rsi
   209 00000092 52                          push rdx                                          ;Backup rdx
   210 00000093 51                          push rcx                                          ;Backup rcx
   211 00000094 4150                        push r8                                           ;Backup r8
   212 00000096 4151                        push r9                                           ;Backup r9
   213 00000098 4152                        push r10                                          ;Backup r10
   214 0000009A 4153                        push r11                                          ;Backup r11
   215 0000009C 4154                        push r12                                          ;Backup r12
   216 0000009E 4155                        push r13                                          ;Backup r13
   217 000000A0 4156                        push r14                                          ;Backup r14
   218 000000A2 4157                        push r15                                          ;Backup r15
   219 000000A4 53                          push rbx                                          ;Backup rbx
   220 000000A5 9C                          pushf                                             ;Backup rflags
   221                                  
   222                                      ;Make a copy of the passed in array of ascii values.
   223                                      ;Note that only the low one-byte of rdi is important for this function is_digit.
   224                                      ;Nevertheless, we copy the entire 8-byte register.
   225 000000A6 41BD00000000                mov r13,0
   226 000000AC 4188FD                      mov r13b,dil     ;Copy the low byte of rdi to the low byte of r13.  The other bytes of rdi are all zeros.
   227                                  
   228                                      ;Block to test if value in r13 >= ascii(0)
   229 000000AF 4983FD30                    cmp r13,ascii_value_of_zero
   230 000000B3 7C12                        jl is_digit.return_false
   231                                  
   232                                      ;Block to test if value in r13 <= ascii(9)
   233 000000B5 4983FD39                    cmp r13,ascii_value_of_nine
   234 000000B9 7F0C                        jg is_digit.return_false
   235                                  
   236                                      ;Return true
   237 000000BB 4831C0                      xor rax,rax  ;Set rax to zero
   238 000000BE 48C7C0FFFFFFFF              mov rax,true
   239 000000C5 EB08                        jmp is_digit.restore_gpr_registers
   240                                  
   241                                      is_digit.return_false:
   242 000000C7 4831C0                      xor rax,rax  ;Set rax to zero
   243 000000CA B800000000                  mov rax,false
   244                                  
   245                                      is_digit.restore_gpr_registers:
   246                                      ;Restore all general purpose registers to their original values
   247 000000CF 9D                          popf                                    ;Restore rflags
   248 000000D0 5B                          pop rbx                                 ;Restore rbx
   249 000000D1 415F                        pop r15                                 ;Restore r15
   250 000000D3 415E                        pop r14                                 ;Restore r14
   251 000000D5 415D                        pop r13                                 ;Restore r13
   252 000000D7 415C                        pop r12                                 ;Restore r12
   253 000000D9 415B                        pop r11                                 ;Restore r11
   254 000000DB 415A                        pop r10                                 ;Restore r10
   255 000000DD 4159                        pop r9                                  ;Restore r9
   256 000000DF 4158                        pop r8                                  ;Restore r8
   257 000000E1 59                          pop rcx                                 ;Restore rcx
   258 000000E2 5A                          pop rdx                                 ;Restore rdx
   259 000000E3 5E                          pop rsi                                 ;Restore rsi
   260 000000E4 5F                          pop rdi                                 ;Restore rdi
   261 000000E5 5D                          pop rbp                                 ;Restore rbp
   262                                  
   263 000000E6 C3                          ret                                     ;Pop the integer stack and jump to the address represented by the popped value.
