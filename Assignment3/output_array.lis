     1                                  ;****************************************************************************************************************************
     2                                  ;Program name: "Assignment3, The Arrays Program". This program demonstrates the use of user input into an array and         *
     3                                  ;getting the sum of an array as well as sorting it using Assembly, C, and C++.                                              *
     4                                  ;Copyright (C) 2024  Christine Mier                                                                                         *
     5                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     6                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     7                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     8                                  ;warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     9                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
    10                                  ;****************************************************************************************************************************
    11                                  
    12                                  
    13                                  
    14                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3=========4=========5=========6=========7**
    15                                  ;Author information
    16                                  ;  Author name: Christine Mier
    17                                  ;  Author email: cmier@csu.fullerton.edu
    18                                  ;
    19                                  ;Program information
    20                                  ; Program name: Assignment 3, The Array Program
    21                                  ;  Programming languages X86 with one module in C++ and one module in C
    22                                  ;  Date development of version 1 began 2024-Oct-04
    23                                  ;  Date development of version 1 completed 2024-Oct-13
    24                                  ;
    25                                  ;Purpose
    26                                  ;  This program is a 'Array' program which demonstrates the use of user input into an array and getting the sum of an array as well as sorting it using Assembly, C, and C++.
    27                                  ;
    28                                  ;Project information
    29                                  ;  Files: main.c, manager.asm, input_array.asm, isinteger.asm, output_array.asm, sum.asm, sort.cpp, run.sh
    30                                  ;  Status: The program has been tested extensively with no detectable errors. However, it does not print output of array correctly and does not call for sum of array correctly
    31                                  ;
    32                                  ;Translator information
    33                                  ;  Linux: nasm -f elf64 -l output_array.lis -o output_array.o output_array.asm
    34                                  
    35                                  ;References and credits
    36                                  ; Holliday
    37                                  
    38                                  ;Format information
    39                                  ;  Page width: 172 columns
    40                                  ;  Begin comments: 61
    41                                  ;  Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    42                                  ;
    43                                  ;===== Begin code area ====================================================================================================================================================
    44                                  
    45                                  ;externs
    46                                  extern printf
    47                                  extern manager
    48                                  extern isinteger
    49                                  global sort
    50                                  extern input_array
    51                                  global output_array
    52                                  
    53                                  segment .data
    54 00000000 256C640A00                  intform db "%ld", 10, 0
    55                                  
    56                                  segment .bss
    57                                  
    58                                  segment .text
    59                                  output_array:
    60                                  ;16 pushes
    61 00000000 55                      push rbp
    62 00000001 4889E5                  mov rbp, rsp
    63 00000004 53                      push rbx
    64 00000005 51                      push rcx
    65 00000006 52                      push rdx
    66 00000007 57                      push rdi
    67 00000008 56                      push rsi
    68 00000009 4150                    push r8
    69 0000000B 4151                    push r9
    70 0000000D 4152                    push r10
    71 0000000F 4153                    push r11
    72 00000011 4154                    push r12
    73 00000013 4155                    push r13
    74 00000015 4156                    push r14
    75 00000017 4157                    push r15
    76 00000019 9C                      pushf
    77                                  
    78                                  ;store data
    79 0000001A 4989FE                  mov     r14, rdi
    80 0000001D 4989F7                  mov     r15, rsi        ;rsi = how many
    81 00000020 4D31ED                  xor     r13, r13        ;r13 = index of array, increases by 1
    82                                  
    83                                  beginloop:
    84 00000023 4D39FD                      cmp     r13, r15        ;checks if r13 > r15
    85 00000026 7D1D                        jge     outsideloop
    86                                  
    87                                      ;output integer from array
    88 00000028 B800000000                  mov     rax, 0
    89 0000002D 48BF-                       mov     rdi, intform
    89 0000002F [0000000000000000] 
    90 00000037 4B8B34EE                    mov     rsi, [r14 + 8 * r13]
    91 0000003B E8(00000000)                call    printf
    92 00000040 49FFC5                      inc     r13             ;same as r13++, checks if it has reached limit
    93 00000043 EBDE                        jmp     beginloop
    94                                  
    95                                  outsideloop:
    96 00000045 B800000000                  mov     rax, 0
    97                                  
    98                                      ;16 pops
    99 0000004A 9D                          popf
   100 0000004B 415F                        pop r15
   101 0000004D 415E                        pop r14
   102 0000004F 415D                        pop r13
   103 00000051 415C                        pop r12
   104 00000053 415B                        pop r11
   105 00000055 415A                        pop r10
   106 00000057 4159                        pop r9
   107 00000059 4158                        pop r8
   108 0000005B 5E                          pop rsi
   109 0000005C 5F                          pop rdi
   110 0000005D 5A                          pop rdx
   111 0000005E 59                          pop rcx
   112 0000005F 5B                          pop rbx
   113 00000060 5D                          pop rbp
   114                                  
   115 00000061 C3                          ret
